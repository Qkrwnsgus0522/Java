package project;

import java.util.Scanner;

// 관리자 모드 비번 : 1234 -> 사용자 모드와 관리자 모드를 분리하였기 때문에 사용자가 메뉴에서 쉽게 접근할 수 없도록 관리자 모드로 이동하는 비밀번호를 설정 하였습니다.

// 학생부 클래스 선언
class Student1 { // 먼저 학생부 객체 형태?를 정의해 놓았는데요 멤버변수는 학생번호와 이름, 점수 이렇게 3개를 가지고 있습니다.
   int num; // PK 학생번호(인덱스아님) // 학생번호는 같은 이름과 같은 점수의 학생이 있어도 서로 다른 객체라는 것을 식별해야 되기 때문에
   String name;					  // 중복되지 않고 고유한 값이 되도록 학생 생성 순서로 설정하였습니다.
   int score;

   // 생성자
   Student1(int num, String name, int score) { // 이제 객체를 생성할 때 호출하는 생성자를 만들었는데 사용자가 입력한 학생 이름과 점수로 멤버변수를
      this.num = num;						   // 초기화 해야하기 때문에 기본생성자가 아니라 정보를 가져올 매개변수가 존재하는 생성자를 만들었습니다.
      this.name = name;
      this.score = score;
      System.out.println(num + "번 " + name + "학생이 저장되었습니다!");
   }
      
   // 학생 목록 출력 메서드
   void printList() {
      System.out.println(num+"번 학생 "+" | "+ this.name + " [" + this.score + "점]");
   }
   
   // 학생 점수 변경
   void setScore(int score) {
      this.score = score;
      System.out.println( this.name + " 학생의 점수가 " + this.score + "점으로 업데이트 되었습니다!\n");
   }
   
   // 그리고 밑에 보시면 학생 목록 출력 메서드와 학생 점수 변경 메서드가 있는데요 이 두 기능은
   // 학생부 프로그램에서 계속 재사용되기 때문에 학생부 클래스 내의 메서드로 모듈화한 것을 볼 수 있습니다.
}

public class Project03 {
   public static void main(String[] args) {

      Scanner sc = new Scanner(System.in); // 이 프로그램은 사용자로부터 정보를 입력받아야 하기 때문에 스캐너 객체를 생성했습니다.

      Student1[] data = new Student1[3]; // 학생 배열 객체 생성, 최대 3명 // 그리고 학생부 클래스를 이용하여 학생정원이 3명이 객체배열을 생성하였습니다.

      // 여기서 사용자가 관리자의 기능을 이용할 수 없어야 하고 관리자만 기능을 쓸 수 있어야 하기 때문에 사용자와 관리자 메뉴를 구분 해 주었습니다.
      
      // 사용자 메인화면
      String userMain = "=== 학생부 프로그램 ===\n" // 사용자 메인화면 메뉴는 학생목록 출력, 학생 1명 출력, 프로그램 종료 로 구성되어 있고
            + "1. 학생목록 출력\n"					// 사용자로 부터 번호 입력을 받을 수 있습니다.
            + "2. 학생 1명 출력\n"
            + "3. 프로그램 종료\n"
            + "================\n "
            + "\n"
            + "번호 입력 : ";

      // 관리자 메인화면
      String managerMain = "=== 관리자 모드 ===\n" // 관리자 메인화면 메뉴는 학생 생성, 학생 점수 변경, 관리자 모드 종료, 프로그램 종료 로 구성되어 있고
            + "1. 학생 생성\n"						// 마찬가지로 번호 입력을 받을 수 있습니다.
            + "2. 학생 점수 변경\n"
            + "3. 관리자 모드 종료\n"
            + "4. 프로그램 종료\n"
            + "==============\n "
            + "\n"
            + "번호 입력 : ";


      String name = ""; // 학생이름 받을 변수
      int score = 0; // 학생점수 받을 변수
      int index = 0; // 학생목록에 저장되어있는 학생의 수
      
      boolean flag = false; // flag 프로그램을 종료시킬 때 사용하는 논리자료형 변수입니다.

      while (true) { // 이 프로그램은 사용자가 종료 시키기 전 까지 계속 실행이 되도록 무한루프로 만들어진 모습이구요

         System.out.println();
         System.out.print(userMain); // 사용자 메인화면 출력
         int action = sc.nextInt(); // 메인화면의 번호 입력받음

         // 3) 프로그램 종료
         if (action == 3) { // 프로그램을 종료하기 위해 3번을 입력하면
            System.out.println("프로그램을 종료합니다..."); // 프로그램종료 문구가 출력되면서
            flag = true; // flag 상태를 변경한 후
            break; // while 반복문을 탈출하여 프로그램이 종료됩니다.
         }

         // 1) 학생부 목록 출력
         else if (action == 1) { // 학생부 목록 출력을 하기 위해 1번을 입력하면
            if(index <= 0) { // 유효성 검사 // 유효성 검사로 넘어가는데 먼저 학생 목록에 저장되어있는 학생이 없다면
               System.out.println("저장된 학생이 없습니다!"); // 저장된 학생이 없다는 문구를 출력한 뒤
               continue; // while 반복분의 조건식으로 이동하여 다시 사용자 메인화면을 출력합니다.
            }
            System.out.println("\n=== 학생부 목록 ==="); // 유효성 검사를 통과하여 저장되어 있는 학생이 있다면 
            for (int i = 0; i < index; i++) { // 학생배열에 저장되어있는 학생만큼
               data[i].printList(); // 화면에 출력합니다.
            }
            System.out.println("===================");

         }

         // 2) 학생 1명 출력
         else if (action == 2) {  // 특정 학생 1명을 출력하기 위해 2번을 입력하면
            if(index <= 0) { // 유효성 검사 // 유효성 검사로 넘어가는데 위와 같이 학생 목록에 저장되어있는 학생이 없다면
               // 학생 생성이 안되어있으면
               System.out.println("저장된 학생이 없습니다!"); // 저장된 학생이 없다는 문구를 출력한 뒤
               continue; // while 반복분의 조건식으로 이동하여 다시 사용자 메인화면을 출력합니다.
            }

            System.out.println("출력하고 싶은 학생의 번호를 입력하세요."); // 유효성 검사를 통과하여 저장되어 있는 학생이 있다면
            System.out.print("번호 입력 : "); // 번호 입력을 받을 수 있습니다.
            
            int num = sc.nextInt(); // 출력할 학생 번호 입력

            if (num < 1 || num > index) { // 유효성 검사 // 여기서 유효성 검사를 다시 해줍니다. 생성된 학생이 있다면 존재하는 학생수의 범위는 1부터 저장되어 있는 
               // 출력할 학생의 번호가 저장되어있는 학생 수 보다 크거나 음수이면 // 학생의 수인 index인데 만약 입력받은 번호가 1보다 작거나 index보다 크다면
               System.out.println("해당 번호의 학생이 존재하지 않습니다!"); // 해당 학생이 존재하지 않는다는 문구를 출력한 후
               continue; // while 반복분의 조건식으로 이동하여 다시 사용자 메인화면을 출력합니다.
            }
//            System.out.print(num + "번 학생");
            data[num - 1].printList(); // 만약 존재하는 학생의 번호라면 인덱스가 num - 1인 객체의 학생 목록 출력 메서드를 호출합니다. 
         }

         else if (action == 1234) { // 관리자 모드로 이동 // 사용자 메뉴에서 1234를 입력하면 관리자 모드로 이동합니다.
            System.out.println("관리자 모드로 이동합니다."); // 관리자 모드 문구를 출력해주고
            while (true) { // 이 때도 관리자 모드로 이동하면 관리자 모드를 나가기 전 까지 계속 실행이 되야하기 때문에 무한루프로 구현하였습니다
               System.out.println();
               System.out.print(managerMain); // 관리자 메인화면 출력

               action = sc.nextInt(); // 관리자 메인화면의 번호 입력받음

               // 3) 관리자 모드 종료
               if (action == 3) { // 관리자 모드를 종료하기 위해 3번을 입력하면
                  System.out.println("관리자 모드를 종료하겠습니다."); // 관리자 모드 종료와 사용자 모드 시작 문구를 출력해주고
                  System.out.println("사용자 모드로 이동합니다.");
                  break; // 사용자 모드로 이동 // 관리자 while 반복문을 탈출하여 다시 사용자 반복문으로 이동하게됩니다.
               }
               // 1) 학생 생성
               else if (action == 1) { // 학생을 생성하기 위해 1번을 입력하면
                  if (index >= data.length) { // 유효성 검사 // 유효성 검사로 현재 저장되어있는 학생의 수 가 정해져있는 학생 배열 길이보다 크거나 같으면
                     // 학생 배열의 이상으로 입력받으면 // 학생을 배열에 추가 할 수 없다는 뜻 이므로
                     System.out.println("정원이 초과되었습니다."); // 정원 초과 문구를 출력해주고
                  }											 // 다시 관리자 메인화면을 출력합니다.
                  while (index < data.length) { // 만약 반대의 경우 학생을 생성할 수 있기 때문에
                     while (true) {
                        System.out.println((index + 1) + "번 학생의 이름을 입력해주세요."); // 생성할 학생의 이름을 입력받고
                        System.out.print("이름 입력 : ");
                        name = sc.next();

                        System.out.println("'"+ name + "' 학생을 등록하시겠습니까?"); // 다시 학생의 이름을 재 확인합니다.
                        System.out.println("1) 네   2) 아니오");
                        System.out.print("번호 입력 : ");
                        action = sc.nextInt();

                        if (action != 1) { // 유효성 검사 // 만약 1번이 아닌 경우를 입력했다면
                           // 아니오 또는 잘못된 입력이면
                           System.out.println("다시 입력해주세요!"); // 다시 입력 이라는 문구를 출력해주고
                           continue; // 이름 입력 while 반복문의 조건식으로 이동하여 다시 이름을 입력하게 됩니다.
                        }
                        break; // 1번을 눌렀다면 이름 입력 while 반복문을 탈출합니다.
                     }

                     while (true) {
                        System.out.println("'"+ name + "' 학생의 점수를 입력해주세요."); // 이후 생성할 학생의 점수를 입력받고
                        System.out.print("점수 입력 : ");
                        score = sc.nextInt();

                        if (score < 0 || score > 100) { // 유효성 검사 // 유효성 검사로 점수가 0미만이거나 100초과했는지 확인합니다.
                           // 점수의 범위를 벗어난 입력이면
                           System.out.println("0 ~ 100점으로 입력해주세요!"); // 안내 문구가 출력되면서
                           continue; // 점수 입력 while 반복문의 조건식으로 이동하여 다시 이름을 입력하게 됩니다.
                        }
                        break; // 만약 올바른 점수를 입력하였다면 점수 입력 while 반복문을 탈출합니다.
                     }
                     // 학생 배열 객체에 저장
                     data[index++] = new Student1(index, name, score); // 이후 학생배열의 index번 인덱스에 입력받은 정보로 학생객체를 생성합니다.
                     break; 										   // index변수는 후위증가했기때문에 인덱스보다 1 증가된 상태로 번호가 저장됩니다.
                  }													   // 학생 생성 while 반복문을 탈출하여 다시 관리자 메인화면을 출력합니다.

               }
               // 2) 학생 점수 변경
               else if (action == 2) { // 학생 점수를 변경하기 위해 2번을 입력했다면

                  if (index <= 0) { // 유효성 검사 // 유효성 검사로 앞에서 한 학생 목록 출력과 같이 학생 목록에 저장되어있는 학생이 없는지 확인합니다.
                     // 학생이 생성이 안되어있으면
                     System.out.println("저장된 학생이 없습니다!"); // 안내 문구가 출력되면서
                     continue; // 관리자 while 반복문의 조건식으로 이동하여 다시 관리자 메인화면을 출력합니다.
                  }

                  while(true) {	// 유효성 검사를 통과했다면
                     System.out.println("변경할 학생의 번호를 입력해주세요 : "); // 변경할 학생의 번호를 입력 받습니다.
                     int num = (sc.nextInt()) - 1; // 여기서 num은 학생의 번호 - 1 이기 때문에 해당 학생배열의 인덱스를 의미합니다.

                     if (num >= 0 && num < index) { // 만약 num이 생성된 학생 인덱스 중 있다면
                        // 입력받은 학생 번호가 학생 생성된 인덱스 중에 있으면 점수 입력
                        while (true) {
                           System.out.println("몇 점으로 수정하시겠습니까?"); // 변경 할 점수를 입력받습니다.
                           System.out.print("점수 입력 : ");

                           score = sc.nextInt();

                           if (score > 100 || score < 0) { // 유효성 검사 // 여기서 학생 생성 부분과 같이 점수 범위를 제한해주고
                              // 입력받은 점수가 100이상이거나 음수이면
                              System.out.println("0 ~ 100점으로 입력해주세요!"); // 잘못된 점수를 입력하면 안내 문구가 출력되면서
                              continue; // 점수 입력 while 반복문의 조건식으로 이동하여 다시 점수를 입력하게 됩니다.
                           }
                           else { // 점수를 올바르게 입력했다면
                              break; // 점수 입력 while 반복문을 탈출합니다.
                           }

                        }
                        data[num].setScore(score); // 이후 num번 인덱스 학생배열의 점수 변경 메서드를 호출하여 점수를 변경합니다.
                        break; // 점수 입력 while 반복문의 조건식으로 이동하여 다시 점수를 입력하게 됩니다.
                     }
                     else { // 유효성 검사 // 만약 num이 생성된 학생 인덱스 중 없다면
                        // 입력받은 학생 번호가 학생 생성된 인덱스 중에 없으면
                        System.out.println("해당 번호의 학생이 존재하지 않습니다!"); // 안내 문구를 출력해주고
                        System.out.println("다시 입력해주세요!");
                        continue; // 관리자 while 반복문의 조건식으로 이동하여 다시 관리자 메인화면을 출력합니다.
                     }
                  }
               }
               // 4) 프로그램 완전 종료
               else if(action == 4) { // 프로그램을 완전 종료하기 위해 4번을 입력하면
                  System.out.println("프로그램을 종료합니다..."); // 프로그램 종료 문구를 출력해주고
                  flag = true; // 프로그램 종료에 사용되는 flag 상태를 변경한 뒤에
                  break; // 관리자 while 반복문을 탈출하게 됩니다. // 그럼 120~232라인 else if 문에서 나와 238라인으로 이동하게 되는데
               }
               else { // 유효성 검사 // 만약 메뉴에 없는 번호를 입력하였담면
                  // 관리자 메인화면의 번호를 잘못 입력했으면
                  System.out.println("잘못 입력하셨습니다!"); // 안내 문구가 출력 되뎌
                  System.out.println("다시 입력해주세요!"); // 관리자 while 반복문의 조건식으로 이동하여 다시 관리자 메인화면을 출력합니다.
               }
            }
         }
         else { // 유효성 검사
            // 사용자 메인화면의 번호를 잘못 입력했으면
            System.out.println("잘못 입력하셨습니다!");
            System.out.println("다시 입력해주세요!");
         }
         if(flag) { // 관리자 4)번 메뉴에서 flag가 true로 변경 되었기 때문에
            break; // 프로그램 완전 종료 // 사용자 while 반복문을 탈출하여 프로그램이 종료됩니다.
         }
      }
   }
}